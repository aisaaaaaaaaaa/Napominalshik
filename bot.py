from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    Application,
)
from apscheduler.schedulers.background import BackgroundScheduler
from db import init_db, add_task, get_tasks, delete_task
from datetime import datetime, timedelta
import asyncio
import re
import logging

logging.basicConfig(level=logging.INFO)
scheduler = BackgroundScheduler()
scheduler.start()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª—å—â–∏–∫.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/add –ü–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—à–∫—É –≤ 18:00\n"
        "/add –ü–æ–∑–≤–æ–Ω–∏—Ç—å –±—Ä–∞—Ç—É 2025-07-13 14:00\n"
        "/add –ü—Ä–æ–≥—É–ª–∫–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00\n"
        "/list ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/delete [ID] ‚Äì —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def send_reminder(bot, user_id, text):
    try:
        await bot.send_message(chat_id=user_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def schedule_async_reminder(bot, user_id, text, time):
    scheduler.add_job(lambda: asyncio.run(send_reminder(bot, user_id, text)), 'date', run_date=time)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    raw_text = ' '.join(context.args).replace('\xa0', ' ')

    if not raw_text:
        await update.message.reply_text("‚ùó–ù–∞–ø–∏—à–∏: /add [—á—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å] [–≤—Ä–µ–º—è –∏–ª–∏ –¥–∞—Ç–∞]")
        return

    try:
        full_datetime = re.search(r'(\d{4}-\d{2}-\d{2})\s+(\d{1,2}:\d{2})$', raw_text)
        tomorrow_time = re.search(r'–∑–∞–≤—Ç—Ä–∞\s+–≤\s+(\d{1,2}:\d{2})$', raw_text, re.IGNORECASE)
        just_time = re.search(r'–≤\s+(\d{1,2}:\d{2})$', raw_text)

        if full_datetime:
            date_str, time_str = full_datetime.groups()
            remind_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
            text = raw_text[:full_datetime.start()].strip()

        elif tomorrow_time:
            time_str = tomorrow_time.group(1)
            date = datetime.now().date() + timedelta(days=1)
            remind_time = datetime.strptime(f"{date} {time_str}", "%Y-%m-%d %H:%M")
            text = raw_text[:tomorrow_time.start()].strip()

        elif just_time:
            time_str = just_time.group(1)
            date = datetime.now().date()
            remind_time = datetime.strptime(f"{date} {time_str}", "%Y-%m-%d %H:%M")
            text = raw_text[:just_time.start()].strip()
        else:
            raise ValueError("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è")

        if remind_time <= datetime.now():
            await update.message.reply_text("‚ùó–í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –±—É–¥—É—â–µ–µ.")
            return

        task_id = add_task(user_id, text, remind_time)
        schedule_async_reminder(context.bot, user_id, text, remind_time)

        await update.message.reply_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\nüìå {text}\nüïí {remind_time.strftime('%d.%m.%Y %H:%M')}"
        )

    except Exception as e:
        await update.message.reply_text(
            "‚ùó–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è.\n–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/add –ü–æ–≥—É–ª—è—Ç—å –≤ 18:30\n"
            "/add –í—Å—Ç—Ä–µ—á–∞ 2025-07-15 10:00\n"
            "/add –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É –∑–∞–≤—Ç—Ä–∞ –≤ 12:00"
        )
        print(f"–û—à–∏–±–∫–∞ –≤ /add: {e}")

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks = get_tasks(user_id)
    if not tasks:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    else:
        msg = "\n".join([
            f"üÜî {tid} ‚Äî {t[0]} –≤ {datetime.strptime(t[1], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')}"
            for tid, t in tasks.items()
        ])
        await update.message.reply_text(f"üìã –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{msg}")

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /delete [ID]")
        return
    try:
        task_id = int(context.args[0])
        delete_task(task_id)
        await update.message.reply_text("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
    except:
        await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞. –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    init_db()
    app = ApplicationBuilder().token("7309...–¢–í–û–ô_–¢–û–ö–ï–ù...").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("list", list_tasks))
    app.add_handler(CommandHandler("delete", delete))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
